// Copyright 2009, 2023 HP Development Company, L.P. The information contained herein is
// subject to change without notice.

import { Logger } from '../utils/logger';
import process from 'node:process';
import path from 'node:path';
import fs from 'node:fs';
import { ISocketClient } from '../socket-client/abstract-socket-client';
import { SocketClient } from '../socket-client/socket-client';

const LOGGER_PREFIX = '[LCSProcessAgent]';
const POLY_PROGRAM_DATA_FOLDER_STRUCTURE = ['Poly', 'Lens Control Service'];
const MAC_APP_SUPPORT_FOLDER_STRUCTURE = ['Library', 'Application Support'];
const POLY_PORT_NUMBER_FILENAME = 'SocketPortNumber';
const RETRY_SOCKET_CONNECTION_INTERVAL = 10_000; // In milliseconds // TODO: Revisit, needs to be more relaxed
const MESSAGE_DELIMITER_CHAR: string = '\u0001'; // Use 'start of heading' (SOH) character (1) as delimiter

export class LensServiceProcessAgent {
  public socketClient: ISocketClient;

  /**
   * autoReconnect is used to re-connect to socket client only when
   * accidental disconnection occurs.
   */
  private autoReconnect: boolean;
  private reconnectionAttemptCounter = 0;
  private reconnectionTimeout: NodeJS.Timeout;

  constructor(autoReconnect = true) {
    this.autoReconnect = autoReconnect;
    this.socketClient = new SocketClient();
  }

  connect(): void {
    this.autoReconnect = true;
    this.socketClient.disconnect$.subscribe(() => {
      // Do not try to re-connect when autoReconnect when disconnected was
      if (this.autoReconnect === true) {
        clearTimeout(this.reconnectionTimeout);
        this.tryReconnectOnFailure(RETRY_SOCKET_CONNECTION_INTERVAL);
      }
    });

    this.createConnection(this.socketClient);
  }

  /**
   * Create connection on the provided socket client
   * @param socketClient
   */
  createConnection(socketClient: ISocketClient): void {
    this.reconnectionAttemptCounter = 0;

    const portFileLocation = LensServiceProcessAgent.getPolyPortNumberPath();
    const polyServicePortNumber =
      LensServiceProcessAgent.findLensServiceNetPort(portFileLocation);

    Logger.debug(
      `${LOGGER_PREFIX} Expecting Lens Control Service on port`,
      polyServicePortNumber
    );

    socketClient.createConnection(
      polyServicePortNumber,
      MESSAGE_DELIMITER_CHAR
    );
  }

  /**
   * Disconnect socket client and disable auto re-connect.
   */
  disconnect(): void {
    // Disable auto re-connect as disconnection is triggered manually
    // autoReconnect is used only for accidental disconnection.
    this.autoReconnect = false;
    this.socketClient.stop();
  }

  /**
   * The method should attempt to auto re-connect after accidental disconnection.
   * In case of intended disconnection, autoReconnect on FALSE will stop reconnection process.
   * @param retryInMilliseconds Time to wait for connection attempt
   * @returns
   */
  tryReconnectOnFailure(retryInMilliseconds: number): void {
    if (this.socketClient.connected$.getValue()) {
      return;
    }
    Logger.debug(
      `${LOGGER_PREFIX} Try reconnection after (seconds)`,
      retryInMilliseconds / 1000
    );

    this.reconnectionTimeout = setTimeout(() => {
      // Do not re-connect when it's disconnected manually in a meantime
      if (this.autoReconnect === false) {
        return;
      }
      this.reconnectionAttemptCounter++;
      Logger.debug(
        `${LOGGER_PREFIX} Reconnection attempt:`,
        this.reconnectionAttemptCounter
      );
      this.createConnection(this.socketClient);
    }, retryInMilliseconds);
  }

  /**
   * Read port number in provided file
   * @param portFilePath Location of SocketPortNumber file
   * @returns Port number
   */
  protected static findLensServiceNetPort(portFilePath: string): number {
    let serverPort = 0;
    if (portFilePath != undefined && portFilePath.length > 0) {
      try {
        const data = fs.readFileSync(portFilePath, 'utf8');
        const parsedNumber = Number.parseInt(data);
        if (Number.isNaN(parsedNumber)) {
          Logger.debug(`${LOGGER_PREFIX} NOT numerical value in`, portFilePath);
          return serverPort;
        }
        serverPort = parsedNumber;
      } catch (error) {
        if (error.code === 'ENOENT') {
          Logger.debug(`${LOGGER_PREFIX} File does not exist!`, portFilePath);
        } else {
          Logger.debug(`${LOGGER_PREFIX}`, error);
        }
      }
    }

    return serverPort;
  }

  /**
   * Resolves location of SocketPortNumber file generated by Lens Control Service
   * @returns Full file path.
   */
  protected static getPolyPortNumberPath(): string {
    const environment = process.env;

    // Expecting...
    // on Mac: /Users/<username>/Library/Application Support/Poly/Lens Control Service/SocketPortNumber
    // on Win: C:\ProgramData\Poly\Lens Control Service\SocketPortNumber
    const isMac = process.platform === 'darwin';
    const programDataFolder = isMac
      ? path.resolve(environment.HOME, ...MAC_APP_SUPPORT_FOLDER_STRUCTURE)
      : environment.ALLUSERSPROFILE;

    const fullPath = path.resolve(
      programDataFolder,
      ...POLY_PROGRAM_DATA_FOLDER_STRUCTURE,
      POLY_PORT_NUMBER_FILENAME
    );
    Logger.debug(`Poly port number path is ${fullPath}`);

    return fullPath;
  }
}
